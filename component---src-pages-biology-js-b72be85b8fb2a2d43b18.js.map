{"version":3,"sources":["webpack:///./src/pages/biology.js","webpack:///./node_modules/reactstrap/es/Badge.js"],"names":["data","title","container","spacing","css","allMarkdownRemark","edges","map","node","item","xs","sm","key","id","className","fluid","frontmatter","featuredImage","childImageSharp","to","fields","slug","alt","variant","paragraph","style","margin","excerpt","color","tags","date","timeToRead","query","propTypes","string","pill","bool","tag","innerRef","oneOfType","object","func","children","cssModule","Badge","props","Tag","attributes","classes","href","createElement","ref","defaultProps"],"mappings":"0vBAYe,0BAAGA,EAAH,EAAGA,KAAH,OACb,YAAC,IAAD,KAEE,YAAC,SAAD,CAAQC,MAAM,gEAEd,YAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,EACzBC,IAAG,GAIAJ,EAAKK,kBAAkBC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAEhC,YAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EACrBC,IAAKJ,EAAKK,GACVT,IAAG,GAKH,mBAAKU,UAAU,qBACb,mBACEV,IAAG,GAKH,YAAC,IAAD,CAAKW,MAAOP,EAAKQ,YAAYC,cAAcC,gBAAgBH,MAC3DX,IAAG,KAOL,mBACAA,IAAG,GAOD,YAAC,OAAD,CACEe,GAAIX,EAAKY,OAAOC,KAChBC,IAAKd,EAAKY,OAAOC,KACjBjB,IAAG,GAIH,YAAC,IAAD,CAAYmB,QAAQ,QACpBnB,IAAG,GAGAI,EAAKQ,YAAYf,OAEpB,YAAC,IAAD,CAAYuB,WAAS,EAACC,MAAO,CAAEC,OAAQ,MACpClB,EAAKmB,UAGV,mBAAKb,UAAU,kBACb,YAAC,IAAD,CAAOc,MAAM,WAAWpB,EAAKQ,YAAYa,OAE3C,oBAAMf,UAAU,iBACbN,EAAKQ,YAAYc,KADpB,MAC6BtB,EAAKuB,WADlC,sBAYP,IAAMC,EAAK,c,iCCtFlB,8EAMIC,EAAY,CACdL,MAAO,IAAUM,OACjBC,KAAM,IAAUC,KAChBC,IAAK,IACLC,SAAU,IAAUC,UAAU,CAAC,IAAUC,OAAQ,IAAUC,KAAM,IAAUP,SAC3EQ,SAAU,IAAUlC,KACpBM,UAAW,IAAUoB,OACrBS,UAAW,IAAUH,QAQnBI,EAAQ,SAAeC,GACzB,IAAI/B,EAAY+B,EAAM/B,UAClB6B,EAAYE,EAAMF,UAClBf,EAAQiB,EAAMjB,MACdU,EAAWO,EAAMP,SACjBH,EAAOU,EAAMV,KACbW,EAAMD,EAAMR,IACZU,EAAa,YAA8BF,EAAO,CAAC,YAAa,YAAa,QAAS,WAAY,OAAQ,QAE1GG,EAAU,YAAgB,IAAWlC,EAAW,QAAS,SAAWc,IAAOO,GAAO,cAAuBQ,GAM7G,OAJII,EAAWE,MAAgB,SAARH,IACrBA,EAAM,KAGD,IAAMI,cAAcJ,EAAK,YAAS,GAAIC,EAAY,CACvDjC,UAAWkC,EACXG,IAAKb,MAITM,EAAMX,UAAYA,EAClBW,EAAMQ,aA5Ba,CACjBxB,MAAO,YACPO,MAAM,EACNE,IAAK,QA0BQ","file":"component---src-pages-biology-js-b72be85b8fb2a2d43b18.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from 'gatsby'\nimport { css } from '@emotion/core'\nimport { Badge } from 'reactstrap'\nimport Img from 'gatsby-image'\nimport { Helmet } from 'react-helmet'\n\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\n\nimport Layout from '../components/layout'\n\nexport default ({ data }) => (\n  <Layout>\n    \n    <Helmet title=\"MM Science | A Online Library website for Myanmar Education\" />\n    \n    <Grid container spacing={3} \n    css={css`\n      padding-top: 10px;\n    `}>\n        \n      {data.allMarkdownRemark.edges.map(({ node }) => (\n          \n        <Grid item xs={12} sm={4} \n          key={node.id} \n          css={css`\n            @media screen and (max-width: 700px) {\n              padding: 0 !important;\n            }        \n        `}>\n          <div className=\"blog__post__items\">\n            <div \n              css={css`\n                @media screen and (max-width: 700px) {\n                  padding: 10px;\n                }\n            `}>\n              <Img fluid={node.frontmatter.featuredImage.childImageSharp.fluid} \n              css={css`\n                @media screen and (max-width: 700px) {\n                  box-shadow: none;\n                  border-radius: 20px;\n                }\n              `}/>\n            </div>\n            <div \n            css={css`\n              padding: 1rem 1rem;\n              background: #fff;\n              @media screen and (max-width: 700px) {\n                border-radius: 20px;\n              }\n            `}>\n              <Link\n                to={node.fields.slug}\n                alt={node.fields.slug}\n                css={css`\n                  text-decoration: none;\n                  color: inherit;\n              `}>\n                <Typography variant=\"body1\"\n                css={css` \n                  font-weight: bold;\n                `}> \n                  {node.frontmatter.title}\n                </Typography>\n                <Typography paragraph style={{ margin: '0'}}>\n                  {node.excerpt}\n                </Typography>\n              </Link>\n              <div className=\"article__label\"> \n                <Badge color=\"success\">{node.frontmatter.tags}</Badge>  \n              </div>\n              <span className=\"article__meta\"> \n                {node.frontmatter.date} Â· {node.timeToRead} min read \n              </span>\n            </div>\n          </div>\n        </Grid>\n         \n      ))}\n    </Grid>\n  </Layout>\n);\n\nexport const query = graphql `\nquery {\n  allMarkdownRemark(filter: {frontmatter: {tags:{eq: \"Biology\"}}}) {\n    totalCount\n    edges {\n      node {\n        id\n        frontmatter {\n          title\n          date(formatString: \"DD MMMM, YYYY\")\n          tags\n          featuredImage {\n            childImageSharp {\n              fluid(maxWidth: 800) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n        fields {\n          slug\n        }\n        excerpt\n      }\n    }\n  }\n}\n`","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  color: PropTypes.string,\n  pill: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  color: 'secondary',\n  pill: false,\n  tag: 'span'\n};\n\nvar Badge = function Badge(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      innerRef = props.innerRef,\n      pill = props.pill,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"innerRef\", \"pill\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'badge', 'badge-' + color, pill ? 'badge-pill' : false), cssModule);\n\n  if (attributes.href && Tag === 'span') {\n    Tag = 'a';\n  }\n\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nBadge.propTypes = propTypes;\nBadge.defaultProps = defaultProps;\nexport default Badge;"],"sourceRoot":""}